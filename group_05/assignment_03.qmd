---
title: "assignment_3"
author: "Nhien Tran, "
format: html
editor: visual
---

## Title

Assignment 3

Group: 5

Member: Nhien Tran

## Introduction

The dataset we selected provides information on salaries across job levels within a company, detailing attributes such as job titles, salary amounts, and associated job levels, ideal for exploring salary trends.

## Methods

### 1. Download and import dataset as a dataframe.

Obtain dataset from Kaggle and import into RStudio environment.

```{r}
#| echo: false
# Path to Git Bash on your computer
#!!Use git_bash_path <- "C:/Program Files/Git/git-bash.exe" instead if you're on Windows!!
git_bash_path <- "/bin/bash"
# Define the Kaggle dataset URL and file paths
kaggle_url <- "https://www.kaggle.com/api/v1/datasets/download/taseermehboob9/salary-dataset-of-business-levels"
output_dir <- "./raw_data"
zip_file <- file.path(output_dir, "archive.zip")

#Create folder "raw_data" if not exists
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)

# CURL command for downloading the dataset
curl_command <- sprintf("curl -L -o %s %s", shQuote(zip_file), shQuote(kaggle_url))

# Run the CURL command
system(paste(shQuote(git_bash_path), "-c", shQuote(curl_command)), intern = TRUE)

# Unzip command
unzip_command <- sprintf("unzip -o %s -d %s", shQuote(zip_file), shQuote(output_dir))

# Run the Unzip command
system(paste(shQuote(git_bash_path), "-c", shQuote(unzip_command)), intern = TRUE)

# Load the dataset
# Install required library
library(readr)

# Define a path to the csv file
salary_csv <- file.path(output_dir, "salary.csv")

# Reads the data from the salary_csv file into the R environment as a data frame
salary_df <- read_csv(salary_csv)

print("Downloaded and imported dataset successfully!")
```

### 2. Cleaning

Rename columns; check and remove missing values

```{r}
library(dplyr)  # For data manipulation
library(skimr)  # For detailed summary

# Standardize column names: make them lowercase, replace spaces with underscores, and remove special characters
salary_df <- salary_df %>% 
  rename_all(~ gsub("[[:space:]]+", "_", .) %>% 
               gsub("[^[:alnum:]_]", "", .) %>% 
               tolower())

# Handle Missing Data
# Check for missing values
missing_counts <- salary_df %>% 
  summarise_all(~ sum(is.na(.)))
print(missing_counts)
```

### 3. Manipulation

To create more potential for analysis, be added a column that represents the percentage increase in salary from one level below.

```{r}
salary_df <- salary_df %>% 
  arrange(level) %>% 
  mutate(salary_increase_percent = case_when(
    !is.na(lag(level)) & level != lag(level) ~ (salary - lag(salary)) / lag(salary) * 100, .default = 0
  ))
```

### 4. Export as new copy

The cleaned and manipulated dataframe as saved as a copy in the raw_data folder.

```{r}
salary_df <- salary_df %>% 
  arrange(level) %>% 
  mutate(salary_increase_percent = case_when(
    !is.na(lag(level)) & level != lag(level) ~ (salary - lag(salary)) / lag(salary) * 100, .default = 0
  ))
```

### 5. EDA

-   Initial inspection using functions such as glimpse(), skim(), and descriptive summary of the columns

-   Visualization: graph of summary statistics, bar/dot graph of salaries across all positions and regression analysis to identify trend

## Results 

### Initial inspection

!!Comments on the stats

```{r}
glimpse(salary_df)
skim(salary_df)
```

### Visualization

!! Comments on results

```{r}
library(ggplot2)

salary_df$position <- gsub(" ", "\n", salary_df$position)

barplot(salary_df$salary,
     names.arg = salary_df$position,
     main = "Salary by Position",
     xlab = "Position",
     ylab = "Salary",
     col = "lightblue",
     border = "black",
     las = 1,            # Keeps y numbers horizontal
     cex.names = 0.55,   # Adjust text size for x-axis labels
     cex.axis = 0.6,     # Adjust axis number text size
     space = 1
     )

```

#### Regression Analysis of Salaries

We performed a regression analysis to visualize the trend of the salaries as one move across the job levels.

```{r}
#Prevent scientific notation for y-axis (Salary)
options(scipen = 999)
plot(salary_df$level, salary_df$salary,
     main = "Salary Regression",
     xlab = "Level",
     ylab = "Salary",
     pch = 19,
     col = "pink",
     las = 1,
     cex = 1.5,     
     cex.axis = 0.75,     
     cex.lab = 1.2,
        )

# Perform Polynomial Regression (degree 2)
poly_model <- lm(salary ~ poly(level, 5, raw = TRUE), data = salary_df)

# Generate predicted values for a smooth curve
levels_seq <- seq(min(salary_df$level), max(salary_df$level), length.out = 100)
predicted_salaries <- predict(poly_model, newdata = data.frame(level = levels_seq))

# Add Polynomial Regression Line
lines(levels_seq, predicted_salaries, col = "blue", lwd = 2)

# Extract Regression Coefficients
coefficients <- coef(poly_model)
intercept <- coefficients[1]
linear_term <- coefficients[2]
quadratic_term <- coefficients[3]

# Add R-squared Value
r_squared <- summary(poly_model)$r.squared

# Display Regression Equation and R-squared on Plot
text(
  x = max(salary_df$level) - 1, 
  y = min(salary_df$salary) + 10000,
  labels = paste0(
    "y = ", round(intercept, 2), 
    " + ", round(linear_term, 2), "x",
    " + ", round(quadratic_term, 2), "x²\n",
    "R² = ", round(r_squared, 2)
  ),
  col = "blue",
  cex = 0.8,
  pos = 4
)

```

Using the linear regression model, we predicts the compensation of the position above CEO hypothetically:

```{r}
# Predict salary for level 11
level_11 <- 11
predicted_salary_level_11 <- predict(poly_model, newdata = data.frame(level = level_11))

# Print the predicted salary
print(paste("Predicted Salary for Level", level_11, "is:", round(predicted_salary_level_11, 2)))


```

#### Salary Increase in Percentage

The graph of salary increase percent show that when get promoted from level 6 through 9, the bonus that one would receive, as a percent of their salary, is not as much as the lower levels.

```{r}
#Prevent scientific notation for y-axis (Salary)
options(scipen = 999)
plot(salary_df$level, salary_df$salary_increase_percent,
     main = "Salary Increase Percent",
     xlab = "Level",
     ylab = "% Increase",
     pch = 19,
     col = "pink",
     las = 1,
     cex = 1.5,     
     cex.axis = 0.75,     
     cex.lab = 1.2,
        )

```

## Discussion

!! Add discussion
